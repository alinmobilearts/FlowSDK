apply plugin: 'maven'

def isReleaseBuild() {
    //return VERSION_NAME.contains("SNAPSHOT") == false
    return true
}

def getOutputDir() {
    if (isReleaseBuild()) {
        return "${project.buildDir}/releases"
    } else {
        return "${project.buildDir}/snapshots"
    }
}

def getDestUrl() {
    if (isReleaseBuild()) {
        return "s3://libraryartifacts/Android/generalFlowBridgeSDK"
//        return "s3://libraryartifacts/Android/generalflowsdk"
    } else {
        return "s3://libraryartifacts/Android/generalFlowBridgeSDK"
//        return "s3://libraryartifacts/Android/generalflowsdk"
    }
}


uploadArchives {

    repositories {
        mavenDeployer {
            // repository(url: "file:///" + getOutputDir()) can also be used to copy to local file
            repository(url: getDestUrl()) // for copying directly to S3

//            pom.groupId = "com.mag"
//            pom.artifactId = "generalsdk"

            pom.groupId = "com.generalflow"
            pom.artifactId = "bridge"
            pom.version = "0.1.6"

            pom.project {
                name "generalflowbridgesdk"
                packaging "aar"
                description "general flow bridge sdk"
            }

             pom.withXml {
                def dependencies = asNode().appendNode('dependencies')
                println 'Ali dependencies print: ' + dependencies
                configurations.getByName("releaseCompileClasspath").getResolvedConfiguration().getFirstLevelModuleDependencies().each {
                    def dependency = dependencies.appendNode('dependency')
                    dependency.appendNode('groupId', it.moduleGroup)
                    dependency.appendNode('artifactId', it.moduleName)
                    dependency.appendNode('version', it.moduleVersion)
                    println 'Ali configurations: ' + configurations.toList().toString()
                }
            }
        }
    }
}

    uploadArchives {

        repositories {
            mavenDeployer {
                repository(url: "file:///" + getOutputDir())
            }
        }
    }

    task copyToS3_Mob(type: Exec) {
        commandLine 'aws', 's3', 'cp', '--recursive', getOutputDir(), getDestUrl()
    }

    copyToS3_Mob.dependsOn uploadArchives